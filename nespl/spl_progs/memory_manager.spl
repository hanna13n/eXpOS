// MOD_2
alias functionNum R1;

if(functionNum == GET_FREE_PAGE) then

    //inc wait mem count
    [SYSTEM_STATUS_TABLE + 3] = [SYSTEM_STATUS_TABLE + 3]+1;

    while( [SYSTEM_STATUS_TABLE + 2] == 0) do    //mem_free_count == 0
        [PROCESS_TABLE + [SYSTEM_STATUS_TABLE  + CORE*5 + 1]*16 + 4] = WAIT_MEM;
        multipush(R1,R2);
        // RELEASE_LOCK
        R1 = 4;
        R2 = KERN_LOCK;
        call ACCESS_CONTROL;
        call SCHEDULER;
        // ACQUIRE_KERN_LOCK
        R1 = 1;
        call ACCESS_CONTROL;
        multipop(R1,R2);
    endwhile;

    // dec wait mem count
    [SYSTEM_STATUS_TABLE + 3] = [SYSTEM_STATUS_TABLE + 3]-1;

    // dec mem free count
    [SYSTEM_STATUS_TABLE + 2] = [SYSTEM_STATUS_TABLE + 2]-1;

    if ([SYSTEM_STATUS_TABLE + 2] < [75*512]) then
        [75*512] = [SYSTEM_STATUS_TABLE + 2];
    endif;

    //acquiring a free page from mem_free_list
    alias i R3;
    i = 76;
    while(i< MAX_MEM_PAGE) do
        if([MEMORY_FREE_LIST + i]==0) then
            [MEMORY_FREE_LIST + i]=1;
            R0=i;
            return;
        endif;
        i=i+1;
    endwhile;
endif;

if(functionNum == RELEASE_PAGE) then

    alias pageno R2;

    [MEMORY_FREE_LIST + pageno] = [MEMORY_FREE_LIST + pageno] - 1;

    if( [MEMORY_FREE_LIST + pageno] == 0) then
        //inc mem free count
        [SYSTEM_STATUS_TABLE + 2] = [SYSTEM_STATUS_TABLE + 2] + 1;
   
        alias i R3;
        i= PROCESS_TABLE + 20;
        while(i < (PROCESS_TABLE + 16*15 + 5)) do
            if([i]==WAIT_MEM) then
                [i]=READY;
            endif;
            i=i+16;
        endwhile;
    endif;

    return;
endif;

if(functionNum == GET_FREE_BLOCK) then

    alias i R2;
    i =  DISK_FREE_LIST + DISK_FREE_AREA;
    while(i < DISK_FREE_LIST + DISK_SWAP_AREA) do
        if([i] == 0) then
            [i] = 1;
            R0 = i - DISK_FREE_LIST;
            return;
        endif;
        i = i + 1;
    endwhile;

    R0 = -1;
    return;
    
endif;

if(functionNum == RELEASE_BLOCK) then

    alias blockno R2;

    //dec disk free list entry
    [DISK_FREE_LIST + blockno] = [DISK_FREE_LIST + blockno]-1;

    return;
endif;

if(functionNum == GET_CODE_PAGE) then
    alias blockno R2;

    alias i R3;
    i = 0;
    alias j R4;

    
    while(i < 16 ) do
        j=4;
        while( j < 8) do
            if( [ DISK_MAP_TABLE + i*10 + j] == blockno  && [PAGE_TABLE_BASE + i*20 + 2*j] != -1 ) then

                R0=[PAGE_TABLE_BASE + i*20 + 2*j];
                [MEMORY_FREE_LIST + R0] = [MEMORY_FREE_LIST + R0] + 1;
                return;

            endif;
            j=j+1;
        endwhile;
        i=i+10;
    endwhile;

    // GET_FREE_PAGE
    multipush(R1,R2,R3,R4);
    R1 = 1;
    call MEMORY_MANAGER;
    multipop(R1,R2,R3,R4);

    // DISK_LOAD
    multipush(R0,R1,R2,R3,R4);
    R1=2;
    R4=blockno;
    R2=[SYSTEM_STATUS_TABLE  + CORE*5 + 1];
    R3=R0;
    call DEVICE_MANAGER;
    multipop(R0,R1,R2,R3,R4);
  
    return;
endif;

if(functionNum == GET_SWAP_BLOCK) then
    alias i R2;
    i = DISK_FREE_LIST + DISK_SWAP_AREA;
    while(i < DISK_FREE_LIST + DISK_SIZE) do
        if([i] == 0) then
            [i] = 1;
            R0 = i - DISK_FREE_LIST;
            return;
        endif;
        i = i + 1;
    endwhile;

    R0 = -1;
    return;
endif;