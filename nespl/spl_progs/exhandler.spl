[PROCESS_TABLE + [SYSTEM_STATUS_TABLE  + CORE*5 + 1] * 16 + 9] = -1;

// // count switch to kernel mode
// [75*512 + 3] = [75*512 + 3] + 1;

[PROCESS_TABLE + [SYSTEM_STATUS_TABLE  + CORE*5 + 1] *16 + 13] = SP;
SP = [PROCESS_TABLE + [SYSTEM_STATUS_TABLE  + CORE*5 + 1] *16 +11] *512 -1;

backup;
// ACQUIRE_KERN_LOCK
R1 = 1;
call ACCESS_CONTROL;

alias userSP R0;
userSP = [PROCESS_TABLE + [SYSTEM_STATUS_TABLE  + CORE*5 + 1] *16 + 13];

multipush(EIP);

if( EC != 0 || userSP == PTLR*512-1) then

    if(userSP == PTLR*512 -1) then
        print "StackExhausted";
    endif;
    if(EC == 1) then
        print "IllInstruct!";
        
    endif;
    if(EC == 2) then
        print "IllegalMemAcc";
    endif;
    if(EC == 3) then
        print "ArithmeticExc";
    endif;

    // EXIT_PROCESS
    R1 = 3;
    R2 = [SYSTEM_STATUS_TABLE  + CORE*5 + 1];
    call PROCESS_MANAGER;

    // RELEASE_LOCK
    R1 = 4;
    R2 = KERN_LOCK;
    call ACCESS_CONTROL;

    call SCHEDULER;

endif;

// Code page fault
if( EPN > 3 && EPN < 8 ) then

    // get code page
    multipush(R0);
    R1 = 5;
    R2 = [DISK_MAP_TABLE + 10*[SYSTEM_STATUS_TABLE  + CORE*5 + 1] + EPN];
    call MEMORY_MANAGER;
    [PTBR + 2*EPN] = R0;
    [PTBR + 2*EPN + 1] = "1100";
    multipop(R0);
endif;

// Heap page fault
if( EPN == 2 || EPN == 3) then

    // GET_FREE_PAGE
    multipush(R0);
    R1 = 1;
    call MEMORY_MANAGER;
    [PTBR + 4] = R0;
    [PTBR + 5] = "1110";
    call MEMORY_MANAGER;
    [PTBR + 6] = R0;
    [PTBR + 7] = "1110";
    multipop(R0);
endif;

[PROCESS_TABLE + [SYSTEM_STATUS_TABLE  + CORE*5 + 1] * 16 + 9] = 0;

// RELEASE_LOCK
R1 = 4;
R2 = KERN_LOCK;
call ACCESS_CONTROL;

multipop(EIP);

restore;

SP = [PROCESS_TABLE + [SYSTEM_STATUS_TABLE  + CORE*5 + 1] *16 + 13];
SP = SP+1;

[ [PTBR + (SP/512)*2]*512 + (SP % 512) ] = EIP;

ireturn;