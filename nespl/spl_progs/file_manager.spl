// MOD_3
alias functionNum R1;

if(functionNum == BUFFERED_READ || functionNum == BUFFERED_WRITE) then

    alias blockno R2;
    alias offset R3;
    alias word R4;

    // ACQUIRE_BUFFER
    multipush(R1,R2,R3,R4);
    R1 = 1;
    R3 = blockno % 4;
    R2 = [SYSTEM_STATUS_TABLE  + CORE*5 + 1];
    call RESOURCE_MANAGER;
    multipop(R1,R2,R3,R4);

    alias bufentry R5;
    bufentry = BUFFER_TABLE + (blockno % 4)*4;


    if([bufentry] != blockno ) then

        if([bufentry + 1] == 1) then 
            // DISK Store
            multipush(R1,R2,R3,R4,R5);
            R1 = 1;
            R3 = 71 + (blockno % 4);
            R2 = [SYSTEM_STATUS_TABLE  + CORE*5 + 1];
            R4 = [bufentry];
            call DEVICE_MANAGER;
            multipop(R1,R2,R3,R4,R5);

            [bufentry + 1] = 0;
        endif;

        // DISK_LOAD
        multipush(R1,R2,R3,R4,R5);
        R1 = 2;
        R3 = 71 + (blockno % 4);
        R4 = blockno;
        R2 = [SYSTEM_STATUS_TABLE  + CORE*5 + 1];
        call DEVICE_MANAGER;
        multipop(R1,R2,R3,R4,R5);

        [bufentry] = blockno;

    endif;


    if(functionNum == BUFFERED_WRITE) then

        [(71 + (blockno % 4))*512 + offset] = word;
        [bufentry + 1] = 1;
        
    endif;

    if(functionNum == BUFFERED_READ) then

        [word] = [(71 + (blockno % 4))*512 + offset];
    
    endif;

    // Release Buffer
    multipush(R1,R2,R3,R4,R5);
    R1 = 2;
    R3 = blockno % 4;
    R2 = [SYSTEM_STATUS_TABLE  + CORE*5 + 1]; 
    call RESOURCE_MANAGER;
    multipop(R1,R2,R3,R4,R5);

    return;

endif;

if(functionNum == OPEN) then

    alias filename R2;
    alias inode R3;
    inode = 0;
    while(inode < 60) do
        if([INODE_TABLE + inode*16 + 1] == filename) then
            break;
        endif;
        inode = inode + 1;
    endwhile;

    // inode table full
    if(inode >= 60 ) then
        R0 = -1;
        return;
    endif; 

    // Acquire_INODE
    multipush(R1,R2,R3);
    R1 = 4;
    R2 = [SYSTEM_STATUS_TABLE  + CORE*5 + 1];
    R3 = inode;
    call RESOURCE_MANAGER;
    multipop(R1,R2,R3);

    // file deleted 
    if(R0 == -1) then
        return;
    endif;

    if([INODE_TABLE + inode*16] == EXEC) then

        // RELEASE_INODE
        multipush(R1,R2,R3);
        R1 = 5;
        R2 = [SYSTEM_STATUS_TABLE  + CORE*5 + 1];
        R3 = inode;
        call RESOURCE_MANAGER;
        multipop(R1,R2,R3);

        R0 = -1;
        return;

    endif;

    alias oft R4;
    oft = 0;
    while(oft < 32) do
        if([OPEN_FILE_TABLE + oft*4] == -1) then
            break;
        endif;
        oft = oft + 1;
    endwhile;

    // OPEN_FILE_TABLE full
    if(oft >= 32) then

        // RELEASE_INODE
        multipush(R1,R2,R3,R4);
        R1 = 5;
        R2 = [SYSTEM_STATUS_TABLE  + CORE*5 + 1];
        R3 = inode;
        call RESOURCE_MANAGER;
        multipop(R1,R2,R3,R4);

        R0 = -2;
        return;
    endif;

    alias oftentry R5;
    oftentry = OPEN_FILE_TABLE + oft*4;

    if(filename == "root") then
        [oftentry] = INODE_ROOT; // inode index
    else

        [FILE_STATUS_TABLE + inode*4 + 1] = [FILE_STATUS_TABLE + inode*4 + 1] + 1;  // file open count

        if([FILE_STATUS_TABLE + inode*4 + 1] == 0) then
            [FILE_STATUS_TABLE + inode*4 + 1] = 1;
        endif;

        [oftentry] = inode; // inode index

    endif;

    [oftentry + 1] = 1; // open inst count
    [oftentry + 2] = 0; // seek

    // RELEASE_INODE
    multipush(R1,R2,R3,R4,R5);
    R1 = 5;
    R2 = [SYSTEM_STATUS_TABLE  + CORE*5 + 1];
    R3 = inode;
    call RESOURCE_MANAGER;
    multipop(R1,R2,R3,R4,R5);

    R0 = oft;
    return;

endif;

if(functionNum == CLOSE) then

    alias oft R2;
    alias oftentry R3;
    oftentry = OPEN_FILE_TABLE + oft*4;
    alias inode R4;
    inode = [oftentry];

    // dec open inst count
    [oftentry + 1] = [oftentry + 1] - 1;

    if( [oftentry + 1] == 0) then
        [oftentry] = -1;
        [oftentry + 1] = -1;
        [oftentry + 2] = -1;
        if(inode != INODE_ROOT) then
            //dec file open count
            [FILE_STATUS_TABLE + inode*4 + 1] = [FILE_STATUS_TABLE + inode*4 + 1] - 1;
        endif;
        if([FILE_STATUS_TABLE + inode*4 + 1] == 0) then
            [FILE_STATUS_TABLE + inode*4 + 1] = -1;
        endif;
    endif;

    return;

endif;