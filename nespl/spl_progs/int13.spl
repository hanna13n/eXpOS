alias userSP R0;
userSP = SP;

// // count switch to kernel mode
// [75*512 + 3] = [75*512 + 3] + 1;

[PROCESS_TABLE + [SYSTEM_STATUS_TABLE  + CORE*5 + 1] *16 + 13] = SP;
SP = [PROCESS_TABLE + [SYSTEM_STATUS_TABLE  + CORE*5 + 1] *16 +11] *512 -1;

multipush(R0);
// ACQUIRE_KERN_LOCK
R1 = 1;
call ACCESS_CONTROL;
multipop(R0);

alias syscallno R1;
syscallno = [[(userSP-5)/512 *2 +PTBR] *512 + ((userSP-5)%512)];

alias curPCB R2;
curPCB = PROCESS_TABLE + [SYSTEM_STATUS_TABLE  + CORE*5 + 1]*16; 

[curPCB + 9] = syscallno;

if(syscallno == 17) then // Semget

    alias i R3;
    alias j R4;
    alias k R5;

    i = [curPCB + 11]*512 + 496;
    k = 0;
    j = i+16;

    while ( i + k*2 < j) do

        if ([i + k*2] == -1) then

            // acquire semaphore
            multipush(R0,R1,R2,R3,R4,R5);
            R1 = 6;
            R2 = [SYSTEM_STATUS_TABLE  + CORE*5 + 1];
            call RESOURCE_MANAGER;
            multipop(R1,R2,R3,R4,R5);

            if(R0 == -1) then

                multipop(R0);
                [[(userSP-1)/512 *2 +PTBR] *512 + ((userSP-1)%512)] = -2;
                [curPCB + 9] = 0;
                multipush(R0);
                // RELEASE_LOCK
                R1 = 4;
                R2 = KERN_LOCK;
                call ACCESS_CONTROL;
                multipop(R0);
                SP = userSP;

                ireturn;
            endif;

            [i + k*2] = SEMAPHORE;
            [i + k*2 + 1] = R0;
            multipop(R0);

            [[(userSP-1)/512 *2 +PTBR] *512 + ((userSP-1)%512)] = k;
            [curPCB + 9] = 0;
            multipush(R0);
            // RELEASE_LOCK
            R1 = 4;
            R2 = KERN_LOCK;
            call ACCESS_CONTROL;
            multipop(R0);
            SP = userSP;

            ireturn;
        endif;
        k = k + 1;
    endwhile;

    [[(userSP-1)/512 *2 +PTBR] *512 + ((userSP-1)%512)] = -1;

endif;

if(syscallno == 18) then // Semrelease

    alias semid R3;
    semid = [[(userSP-4)/512 *2 +PTBR] *512 + ((userSP-4)%512)];
    alias rt R4;
    rt = [curPCB + 11]*512 + 496;

    if(semid < 0 || semid > 7 || [rt + semid*2] != SEMAPHORE) then

        [[(userSP-1)/512 *2 +PTBR] *512 + ((userSP-1)%512)] = -1;
        [curPCB + 9] = 0;
        multipush(R0);
        // RELEASE_LOCK
        R1 = 4;
        R2 = KERN_LOCK;
        call ACCESS_CONTROL;
        multipop(R0);
        SP = userSP;

        ireturn;
    endif;

    // release semaphore
    multipush(R0,R1,R2,R3,R4);
    R3 = [rt + semid*2 + 1];
    R1 = 7;
    R2 = [SYSTEM_STATUS_TABLE  + CORE*5 + 1];
    call RESOURCE_MANAGER;
    multipop(R0,R1,R2,R3,R4);
    
    [rt + semid*2 ] = -1;
    [[(userSP-1)/512 *2 +PTBR] *512 + ((userSP-1)%512)] = 0;


endif;

[curPCB + 9] = 0;
multipush(R0);
// RELEASE_LOCK
R1 = 4;
R2 = KERN_LOCK;
call ACCESS_CONTROL;
multipop(R0);
SP = userSP;
ireturn;