alias userSP R0;
userSP = SP;

// // count switch to kernel mode
// [75*512 + 3] = [75*512 + 3] + 1;

[PROCESS_TABLE + [SYSTEM_STATUS_TABLE  + CORE*5 + 1] *16 + 13] = SP;
SP = [PROCESS_TABLE + [SYSTEM_STATUS_TABLE  + CORE*5 + 1] *16 +11] *512 -1;

multipush(R0);
// ACQUIRE_KERN_LOCK
R1 = 1;
call ACCESS_CONTROL;
multipop(R0);

alias syscallno R1;
syscallno = [[(userSP-5)/512 *2 +PTBR] *512 + ((userSP-5)%512)];

alias curPCB R2;
curPCB = PROCESS_TABLE + [SYSTEM_STATUS_TABLE  + CORE*5 + 1]*16; 

[curPCB + 9] = syscallno;



alias semid R3;
semid = [[(userSP-4)/512 *2 +PTBR] *512 + ((userSP-4)%512)];

if(semid < 0 || semid > 7 || [[curPCB + 11]*512 + 496 + semid*2] != SEMAPHORE) then
    [[(userSP-1)/512 *2 +PTBR] *512 + ((userSP-1)%512)] = -1;
    [curPCB + 9] = 0;

    multipush(R0);
    // RELEASE_LOCK
    R1 = 4;
    R2 = KERN_LOCK;
    call ACCESS_CONTROL;
    multipop(R0);
    SP = userSP;
    ireturn;
endif;

alias semindex R4;
semindex = [[curPCB + 11]*512 + 496 + semid*2 + 1];

if(syscallno == 19) then // SemLock

    
    while([SEMAPHORE_TABLE + semindex*4] != -1 && [SEMAPHORE_TABLE + semindex*4] != [SYSTEM_STATUS_TABLE  + CORE*5 + 1]) do
        [curPCB + 4] = WAIT_SEMAPHORE;
        [curPCB + 5] = semindex;
        multipush(R0,R1,R2,R3,R4);
        // RELEASE_LOCK
        R1 = 4;
        R2 = KERN_LOCK;
        call ACCESS_CONTROL;
        call SCHEDULER;
        // ACQUIRE_KERN_LOCK
        R1 = 1;
        call ACCESS_CONTROL;
        multipop(R0,R1,R2,R3,R4);
    endwhile;

    [SEMAPHORE_TABLE + semindex*4] = [SYSTEM_STATUS_TABLE  + CORE*5 + 1];
    [[(userSP-1)/512 *2 +PTBR] *512 + ((userSP-1)%512)] = 0;

endif;

if(syscallno == 20) then // SemUnlock

    
    if([SEMAPHORE_TABLE + semindex*4] != [SYSTEM_STATUS_TABLE  + CORE*5 + 1]) then
        [[(userSP-1)/512 *2 +PTBR] *512 + ((userSP-1)%512)] = -2;
        [curPCB + 9] = 0;
        multipush(R0);
        // RELEASE_LOCK
        R1 = 4;
        R2 = KERN_LOCK;
        call ACCESS_CONTROL;
        multipop(R0);
        SP = userSP;

        ireturn;
    endif;

    [SEMAPHORE_TABLE + semindex*4] = -1;

    alias i R5;
    i = PROCESS_TABLE + 16 + 4;

    while ( i < PROCESS_TABLE + 15*16 + 5 ) do
        if([i] == WAIT_SEMAPHORE && [i+1] == semindex) then
            [i] = READY;
        endif;
        i = i+16;
    endwhile;
  
    [[(userSP-1)/512 *2 +PTBR] *512 + ((userSP-1)%512)] = 0;

endif;

[curPCB + 9] = 0;

multipush(R0);
// RELEASE_LOCK
R1 = 4;
R2 = KERN_LOCK;
call ACCESS_CONTROL;
multipop(R0);

SP = userSP;
ireturn;