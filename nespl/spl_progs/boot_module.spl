// MOD_7

// Exception Handler
loadi(2,15);
loadi(3,16);

// Timer interrupt routine
loadi(4,17);
loadi(5,18);

// Disk interrupt routine
loadi(6,19);
loadi(7,20);

// Console interrupt routine
loadi(8,21);
loadi(9,22);

// INT 4 create,delete file
loadi(10,23);
loadi(11,24);

// INT 5 open, close, seek file
loadi(12,25);
loadi(13,26);

// INT 6,read routine
loadi(14,27);
loadi(15,28);

// INT 7,write routine
loadi(16,29);
loadi(17,30);

// INT 8, Fork
loadi(18,31);
loadi(19,32);

// INT 9, exec
loadi(20,33);
loadi(21,34);

// INT 10,exit routine
loadi(22,35);
loadi(23,36);

// INT 11, GP,GPP,Wait,Signal
loadi(24,37);
loadi(25,38);

// INT 12, logout
loadi(26,39);
loadi(27,40);

// INT 13 semmget Semrelease
loadi(28,41);
loadi(29,42);

// INT 14 semlock SemUnlock
loadi(30,43);
loadi(31,44);

// INT 15 shutdown
loadi(32,45);
loadi(33,46);

// INT 16 newusr, remusr, setpwd, getuname, getuid
loadi(34,47);
loadi(35,48);

// INT 17 Login
loadi(36,49);
loadi(37,50);

// RESOURCE_MANAGER mod 0
loadi(40,53);
loadi(41,54);

// PROCESS_MANAGER mod 1
loadi(42,55);
loadi(43,56);

// MEMORY_MANAGER mod 2
loadi(44,57);
loadi(45,58);

// FILE_MANAGER mod 3
loadi(46,59);
loadi(47,60);

// DEVICE_MANAGER mod 4
loadi(48,61);
loadi(49,62);

// Mod_5 SCHEDULER
loadi(50,63);
loadi(51,64);

// Mod_6 PAGER_MODULE
loadi(52,65);
loadi(53,66);

// INODE_TABLE && USER TABLE
loadi(59,3);
loadi(60,4);

// DISK_FREE_LIST
loadi(61,2);

// ROOT_FILE
loadi(62,5);

// Expos Library
loadi(63,13);
loadi(64,14);

// INIT/Login Program
loadi(65,7);

// Shell Program
loadi(67,9);
loadi(68,10);

// Secondary Bootstrap
loadi(128,512);

// Access Control MOD_8
loadi(132,516);
loadi(133,517);

alias i R0;
alias j R1;


[TERMINAL_STATUS_TABLE]=0;
[DISK_STATUS_TABLE]=0;

PTLR=10;
//INIT Login
PTBR = PAGE_TABLE_BASE + 20;

//Library
[PTBR + 0] = 63;
[PTBR + 1] = "0100";
[PTBR + 2] = 64;
[PTBR + 3] = "0100";
  
//Heap  
[PTBR + 4] = -1;
[PTBR + 5] = "0000";
[PTBR + 6] = -1;
[PTBR + 7] = "0000";
  
//Code  
[PTBR + 8] = 65;
[PTBR + 9] = "0100";
[PTBR + 10] = -1;
[PTBR + 11] = "0000";
[PTBR + 12] = -1;
[PTBR + 13] = "0000";
[PTBR + 14] = -1;
[PTBR + 15] = "0000";
  
//Stack  
[PTBR + 16] = 66;
[PTBR + 17] = "0110";
[PTBR + 18] = -1;
[PTBR + 19] = "0000";
 
//Process Table INIT 
[PROCESS_TABLE + 16] = 0;                                    
[PROCESS_TABLE + 17] = 1;           //pid                   
[PROCESS_TABLE + 19] = 1;           //user id          
[PROCESS_TABLE + 20] = CREATED;     //STATE          
[PROCESS_TABLE + 22] = 0;           //swap_flag
[PROCESS_TABLE + 27] = 77;         //UA PG NO             
[PROCESS_TABLE + 28] = 0;          //KPTR              
[PROCESS_TABLE + 29] = 8*512;      //UPTR                 
[PROCESS_TABLE + 30] = PAGE_TABLE_BASE + 20; //PTBR      
[PROCESS_TABLE + 31] = 10;         //PTLR 


//INIT UserStack
[66 * 512] = [65 * 512 + 1];

// Shell Program
PTBR = PAGE_TABLE_BASE+40;
//Library
[PTBR + 0] = 63;
[PTBR + 1] = "0100";
[PTBR + 2] = 64;
[PTBR + 3] = "0100";
  
//Heap  
[PTBR +4] = -1;
[PTBR +5] = "0000";
[PTBR +6] = -1;
[PTBR +7] = "0000";
   
//Code  
[PTBR + 8] = 67;
[PTBR + 9] = "0100";
[PTBR + 10] = 68;
[PTBR + 11] = "0100";
[PTBR + 12] = -1;
[PTBR + 13] = "0000";
[PTBR + 14] = -1;
[PTBR + 15] = "0000";
  
//Stack  
[PTBR + 16] = 78;
[PTBR + 17] = "0110";
[PTBR + 18] = 79;
[PTBR + 19] = "0110";


//PROCESS_TABLE Shell  
[PROCESS_TABLE + 32] = 0;        
[PROCESS_TABLE + 33] = 2;         //pid
[PROCESS_TABLE + 34] = 1;         //ppid
[PROCESS_TABLE + 36] = TERMINATED;   //STATE
[PROCESS_TABLE + 38] = 0;         //swap_flag
[PROCESS_TABLE + 43] = 80;       //UA PG
[PROCESS_TABLE + 44] = 0;        //KPTR
[PROCESS_TABLE + 45] = 8*512;    //UPTR
[PROCESS_TABLE + 46] = PAGE_TABLE_BASE + 40; //PTBR
[PROCESS_TABLE + 47] = 10;       //PTLR

// Shell DISK_MAP_TABLE
j = 0;
while(j < 10) do
    [DISK_MAP_TABLE + 20 + j] = -1;
    j = j + 1;
endwhile;
[DISK_MAP_TABLE + 20 + 4] = 9;
[DISK_MAP_TABLE + 20 + 5] = 10;

//  shell per-process resource table
j = 80 * 512 + (512-16);
while(j < 80 * 512 + 512) do
    [j] = -1;
    j = j + 1;
endwhile;

// Shell UserStack
[78 * 512] = [67 * 512 + 1];


// initialize PROCESS_TABLE entries
i = PROCESS_TABLE + 3*16 + 4;
while(i < PROCESS_TABLE + 15*16 +5) do
    [i] = TERMINATED;
    [i - 4] = 0;
    i = i + 16;
endwhile;

// initialize SEMAPHORE_TABLE
i = SEMAPHORE_TABLE;
while(i < SEMAPHORE_TABLE + 31*4 + 1) do
    [i] = -1;
    [i + 1] = 0;
    i = i + 4;
endwhile;

// initialize FILE_STATUS_TABLE
i = FILE_STATUS_TABLE;
while( i < FILE_STATUS_TABLE + 59*4 + 2) do
    [i] = -1;
    i = i+1;
endwhile;

// initialize BUFFER_TABLE
i = BUFFER_TABLE;
while(i < BUFFER_TABLE + 4*4 ) do
    [i] = -1;
    [i + 1] = 0;
    [i + 2] = -1;
    i = i + 4;
endwhile;

// initialize OPEN_FILE_TABLE
i = OPEN_FILE_TABLE;
while(i < OPEN_FILE_TABLE + 32*4) do
    [i] = -1;
    [i + 1] = 0;
    i = i + 4;
endwhile;

// initialize ACCESS_LOCK_TABLE
[KERN_LOCK] = 0;
[SCHED_LOCK] = 0;

//initialize MEMORY_FREE_LIST
i = 0;
while(i < 85) do
    [MEMORY_FREE_LIST + i] = 1;
    i = i + 1;
endwhile;
while(i < 128) do
    [MEMORY_FREE_LIST + i] = 0;
    i = i + 1;
endwhile;



// mem_free_count
[SYSTEM_STATUS_TABLE + 2] = 43;
// wait_mem_count
[SYSTEM_STATUS_TABLE + 3] = 0;
// swap_count
[SYSTEM_STATUS_TABLE + 4] = 0;
// paging_status
[SYSTEM_STATUS_TABLE + 5] = 0;

return;
