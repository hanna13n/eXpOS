
[PROCESS_TABLE + [SYSTEM_STATUS_TABLE  + CORE*5 + 1] * 16 + 9] = 28; // logout

alias curPCB R1;
curPCB = PROCESS_TABLE + [SYSTEM_STATUS_TABLE  + CORE*5 + 1]*16;

// // count switch to kernel mode
// [75*512 + 3] = [75*512 + 3] + 1;

alias userSP R0;
userSP = SP;


[curPCB + 13] = SP;
SP = [curPCB + 11]*512 -1;

multipush(R0,R1);
// ACQUIRE_KERN_LOCK
R1 = 1;
call ACCESS_CONTROL;
multipop(R0,R1);

[SYSTEM_STATUS_TABLE + 7] = 1;
[curPCB + 4] = READY;

multipush(R0,R1);
// RELEASE_LOCK
R1 = 4;
R2 = KERN_LOCK;
call ACCESS_CONTROL;


call SCHEDULER;


// ACQUIRE_KERN_LOCK
R1 = 1;
call ACCESS_CONTROL;
multipop(R0,R1);

alias retvalue R2;
retvalue = [(userSP-1)/512 *2 +PTBR] *512 + ((userSP-1)%512);

// only Shell process can logout
if([SYSTEM_STATUS_TABLE  + CORE*5 + 1] != 2) then 
    [retvalue] = -1;
    [curPCB + 9] = 0;

    multipush(R0);
    // RELEASE_LOCK
    R1 = 4;
    R2 = KERN_LOCK;
    call ACCESS_CONTROL;
    multipop(R0);

    SP = userSP;
    ireturn;
endif;

// Kill ALL
multipush(R0,R1,R2);
R1 = 5;
R2 = 2; // Shell
call PROCESS_MANAGER;
multipop(R0,R1,R2);

[curPCB + 4] = TERMINATED;

[SYSTEM_STATUS_TABLE + 7] = 0;

// entry IP value of shell set at beginning of shell user stack
[ [PTBR + 8*2] * 512] = [67 * 512 + 1];

// reset userSP
[curPCB + 13] = 8*512;

// Wake up login process
[PROCESS_TABLE + 16 + 4] = READY;

// current userid
[SYSTEM_STATUS_TABLE] = 0;

// RELEASE_LOCK
R1 = 4;
R2 = KERN_LOCK;
call ACCESS_CONTROL;

call SCHEDULER;