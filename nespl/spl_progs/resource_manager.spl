// MOD_0
alias functionNum R1;
alias currentPID R2;

if(functionNum == ACQUIRE_BUFFER) then

    alias bufno R3;
    alias bufentry R4;
    bufentry = BUFFER_TABLE + bufno*4;
    while([bufentry + 2] != -1 && [bufentry + 2] != currentPID) do
        [PROCESS_TABLE + currentPID*16 + 4] = WAIT_BUFFER;
        [PROCESS_TABLE + currentPID*16 + 5] = bufno;
        multipush(R1,R2,R3,R4);
        // RELEASE_LOCK
        R1 = 4;
        R2 = KERN_LOCK;
        call ACCESS_CONTROL;
        call SCHEDULER;
        // ACQUIRE_KERN_LOCK
        R1 = 1;
        call ACCESS_CONTROL;
        multipop(R1,R2,R3,R4);
    endwhile;

    [bufentry + 2] = currentPID;

    return;

endif;

if(functionNum == RELEASE_BUFFER) then

    alias bufno R3;
    alias bufentry R4;
    bufentry = BUFFER_TABLE + bufno*4;
    if([bufentry + 2] != currentPID) then
        R0 = -1;
        return;
    endif;

    [bufentry + 2] = -1;

    alias i R5;
    i = PROCESS_TABLE + 20;
    while ( i < PROCESS_TABLE + 15*16 + 5) do
        if([i] == WAIT_BUFFER && [i + 1] == bufno) then
            [i] = READY;
        endif;
        i = i + 16;
    endwhile;

    R0 = 0;
    return;

endif;

if(functionNum == ACQUIRE_DISK) then
    while([DISK_STATUS_TABLE] == 1) do
        [PROCESS_TABLE + 16*currentPID + 4]=WAIT_DISK;
        multipush(R1,R2);
        // RELEASE_LOCK
        R1 = 4;
        R2 = KERN_LOCK;
        call ACCESS_CONTROL;
        call SCHEDULER;
        // ACQUIRE_KERN_LOCK
        R1 = 1;
        call ACCESS_CONTROL;
        multipop(R1,R2);
    endwhile;
    [DISK_STATUS_TABLE + 0]=1;
    [DISK_STATUS_TABLE + 4]=currentPID;
    return;
endif;

if(functionNum == ACQUIRE_INODE) then

    alias inode R3;
  
    // busy wait
    while ( [FILE_STATUS_TABLE + inode*4] != -1 && [FILE_STATUS_TABLE + inode*4] != currentPID) do

        [PROCESS_TABLE + currentPID * 16 + 4] = WAIT_FILE;
        [PROCESS_TABLE + currentPID * 16 + 5] = inode;

        multipush(R1,R2,R3);
        // RELEASE_LOCK
        R1 = 4;
        R2 = KERN_LOCK;
        call ACCESS_CONTROL;
        call SCHEDULER;
        // ACQUIRE_KERN_LOCK
        R1 = 1;
        call ACCESS_CONTROL;
        multipop(R1,R2,R3);

    endwhile;

    // if file is deleted
    if([INODE_TABLE + inode*16 + 1] == -1) then
        R0 = -1;
        return;
    endif;

    // LockingPId
    [FILE_STATUS_TABLE + inode*4] = currentPID;

    R0 = 0;
    return;

endif;

if(functionNum == RELEASE_INODE) then

    alias inode R3;

    // if LockingPId is not current process
    if([FILE_STATUS_TABLE + inode*4] != currentPID) then
        R0 = -1;
        return;
    endif;

    // Unlock
    [FILE_STATUS_TABLE + inode*4] = -1;

    // wake up all processes waiting for the file
    alias i R4;
    i = PROCESS_TABLE + 16 + 4;
    while ( i < PROCESS_TABLE + 15*16 + 5) do
        if([i] == WAIT_FILE && [i + 1] == inode) then
            [i] = READY;
        endif;
        i = i + 16;
    endwhile;

    R0 = 0;
    return;

endif;

if(functionNum == ACQUIRE_SEMAPHORE) then

    alias i R3;
    i = 0;
    while ( i < 32) do
        if( [SEMAPHORE_TABLE + i*4 + 1] == 0 ) then
            [SEMAPHORE_TABLE + i*4 + 1] = 1; // Process Count
            [SEMAPHORE_TABLE + i*4] = -1; // Locking PID
            R0 = i;
            return;
        endif ;
        i = i + 1;
    endwhile;

    R0 = -1;
    return;
endif;

if(functionNum == RELEASE_SEMAPHORE) then

    alias semindex R3;
    alias i R4;
    i =  PROCESS_TABLE + 16 + 4;
    if ([SEMAPHORE_TABLE + semindex*4] == currentPID) then

        [SEMAPHORE_TABLE + semindex*4] = -1; // update LockingPId

        while ( i < PROCESS_TABLE + 15*16 + 5 ) do
            if([i] == WAIT_SEMAPHORE && [i+1] == semindex) then
                [i] = READY;
            endif;
            i = i+16;
        endwhile;
    endif;

    // dec process count 
    [SEMAPHORE_TABLE + semindex*4 + 1] = [SEMAPHORE_TABLE + semindex*4 + 1] - 1; 
    return;
endif;

if(functionNum == ACQUIRE_TERMINAL) then
    while([TERMINAL_STATUS_TABLE] == 1) do
        [PROCESS_TABLE + 16*currentPID + 4]=WAIT_TERMINAL;
        multipush(R1,R2);
        // RELEASE_LOCK
        R1 = 4;
        R2 = KERN_LOCK;
        call ACCESS_CONTROL;
        call SCHEDULER;
        // ACQUIRE_KERN_LOCK
        R1 = 1;
        call ACCESS_CONTROL;

        multipop(R1,R2);
    endwhile;
    [TERMINAL_STATUS_TABLE] = 1;
    [TERMINAL_STATUS_TABLE + 1] = currentPID;
    
    return;
endif;

if(functionNum == RELEASE_TERMINAL) then
    if(currentPID==[TERMINAL_STATUS_TABLE+1]) then
        [TERMINAL_STATUS_TABLE]=0;
        alias i R3;
        i=PROCESS_TABLE + 20;
        while(i< PROCESS_TABLE + 15*16 +5) do
            if([i]==WAIT_TERMINAL) then
                [i]=READY;
            endif;
            i=i+16;
        endwhile;
        R0=0;
        
        return;
    else
        R0=-1;
    
        return;
    endif;

endif;
