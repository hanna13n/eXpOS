[PROCESS_TABLE + [SYSTEM_STATUS_TABLE  + CORE*5 + 1] * 16 + 9] = 7;

alias curPCB R1;
curPCB = PROCESS_TABLE + [SYSTEM_STATUS_TABLE  + CORE*5 + 1]*16;

// // count switch to kernel mode
// [75*512 + 3] = [75*512 + 3] + 1;

alias userSP R0;
userSP = SP;


[curPCB + 13] = SP;
SP = [curPCB + 11]*512 -1;

multipush(R0,R1);
// ACQUIRE_KERN_LOCK
R1 = 1;
call ACCESS_CONTROL;
multipop(R0,R1);

alias fileDescriptor R4;
fileDescriptor=[[(userSP-4)/512 *2 +PTBR] *512 + ((userSP-4)%512)];

if(fileDescriptor != -1) then
    
    if(fileDescriptor < 0 || fileDescriptor > 7) then   // invalid fd

        [[(userSP-1)/512 *2 +PTBR] *512 + ((userSP-1)%512)] = -1;   
        [curPCB + 9] = 0;

        multipush(R0);
        // RELEASE_LOCK
        R1 = 4;
        R2 = KERN_LOCK;
        call ACCESS_CONTROL;
        multipop(R0);
        SP=userSP;
        ireturn;
    endif;

    alias rtentry R2;
    rtentry = [curPCB + 11]*512 + 496 + fileDescriptor*2;
  
    if ([rtentry] != FILE) then
        [[(userSP-1)/512 *2 +PTBR] *512 + ((userSP-1)%512)] = -1;   
        [curPCB + 9] = 0;

        multipush(R0);
        // RELEASE_LOCK
        R1 = 4;
        R2 = KERN_LOCK;
        call ACCESS_CONTROL;
        multipop(R0);
        SP=userSP;
        ireturn;
    endif;   


    alias oftentry R3;
    alias inode R5;

    oftentry = OPEN_FILE_TABLE + [rtentry + 1]*4;
    inode = [oftentry];

    // Acquire_INODE
    multipush(R0,R1,R2,R3,R4,R5);
    R1 = 4;
    R2 = [SYSTEM_STATUS_TABLE  + CORE*5 + 1];
    R3 = inode;
    call RESOURCE_MANAGER;

    if (R0 == -1) then  // file was deleted

        multipop(R0,R1,R2,R3,R4,R5);
        [[(userSP-1)/512 *2 +PTBR] *512 + ((userSP-1)%512)] = -1;   
        [curPCB + 9] = 0;

        multipush(R0);
        // RELEASE_LOCK
        R1 = 4;
        R2 = KERN_LOCK;
        call ACCESS_CONTROL;
        multipop(R0);
        SP=userSP;

        ireturn; 

    else

        multipop(R0,R1,R2,R3,R4,R5);

    endif;
    
    alias word R6;  // variable to store read word
 	word = [ [(userSP-3)/512 *2 +PTBR] *512 + ((userSP-3)%512) ];

    if(inode == INODE_ROOT) then

        if ([oftentry + 2] == 480) then // eof ROOT_FILE

            // RELEASE_INODE
            multipush(R0,R1,R2,R3,R4,R5,R6);
            R1 = 5;
            R2 = [SYSTEM_STATUS_TABLE  + CORE*5 + 1];
            R3 = inode;
            call RESOURCE_MANAGER;
            multipop(R0,R1,R2,R3,R4,R5,R6);

            [[(userSP-1)/512 *2 +PTBR] *512 + ((userSP-1)%512)] = -2;   
            [curPCB + 9] = 0;

            multipush(R0);
            // RELEASE_LOCK
            R1 = 4;
            R2 = KERN_LOCK;
            call ACCESS_CONTROL;
            multipop(R0);
            SP=userSP;

            ireturn;  

        endif;

        [[word/512 *2 + PTBR]*512 + (word % 512)] = [ROOT_FILE + [oftentry + 2]]; // read
        [oftentry + 2] = [oftentry + 2] + 1;    // inc lseek

    else
 
        if([oftentry + 2] == [INODE_TABLE + inode*16 + 2]) then // lseek at eof

            // RELEASE_INODE
            multipush(R0,R1,R2,R3,R4,R5,R6);
            R1 = 5;
            R2 = [SYSTEM_STATUS_TABLE  + CORE*5 + 1];
            R3 = inode;
            call RESOURCE_MANAGER;
            multipop(R0,R1,R2,R3,R4,R5,R6);
     
            [[(userSP-1)/512 *2 +PTBR] *512 + ((userSP-1)%512)] = -2;   
            [curPCB + 9] = 0;

            multipush(R0);
            // RELEASE_LOCK
            R1 = 4;
            R2 = KERN_LOCK;
            call ACCESS_CONTROL;
            multipop(R0);
            SP=userSP;

            ireturn;  

        endif;

        // BUFFER_READ
        multipush(R0,R1,R2,R3,R4,R5,R6);
        R1 = 2;
        R2 = [INODE_TABLE + inode*16 + 8 + ([oftentry + 2]/512)];
        R3 = [oftentry + 2] % 512;
        R4 = [word/512 *2 + PTBR]*512 + (word % 512);
        call FILE_MANAGER;
        multipop(R0,R1,R2,R3,R4,R5,R6);    

        [oftentry + 2] = [oftentry + 2] + 1;    // ink lseek

    endif;

    // RELEASE_INODE
    multipush(R0,R1,R2,R3,R4,R5,R6);    
    R1 = 5;
    R2 = [SYSTEM_STATUS_TABLE  + CORE*5 + 1];
    R3 = inode;
    call RESOURCE_MANAGER;
    multipop(R0,R1,R2,R3,R4,R5,R6);

    [[(userSP-1)/512 *2 +PTBR] *512 + ((userSP-1)%512)] = 0;

else
    alias word R5;
 	word = [ [(userSP-3)/512 *2 +PTBR] *512 + ((userSP-3)%512) ];

    multipush(R0,R1,R2,R3,R4,R5);
    R1 = 4;
    R2 = [SYSTEM_STATUS_TABLE  + CORE*5 + 1];
    R3 = word;
    call DEVICE_MANAGER;
	multipop(R0,R1,R2,R3,R4,R5);

 
 	[[(userSP-1)/512 *2 +PTBR] *512 + ((userSP-1)%512)] = 0;
 
endif;

[curPCB + 9] = 0;
// RELEASE_LOCK
R1 = 4;
R2 = KERN_LOCK;
call ACCESS_CONTROL;
SP=userSP;

ireturn;
