[PROCESS_TABLE + [SYSTEM_STATUS_TABLE  + CORE*5 + 1] * 16 + 9] = 27; // login

alias curPCB R1;
curPCB = PROCESS_TABLE + [SYSTEM_STATUS_TABLE  + CORE*5 + 1]*16;

// // count switch to kernel mode
// [75*512 + 3] = [75*512 + 3] + 1;

alias userSP R0;
userSP = SP;


[curPCB + 13] = SP;
SP = [curPCB + 11]*512 -1;

multipush(R0,R1);
// ACQUIRE_KERN_LOCK
R1 = 1;
call ACCESS_CONTROL;
multipop(R0,R1);

alias retvalue R2;
retvalue = [(userSP-1)/512 *2 +PTBR] *512 + ((userSP-1)%512);

// login process pid = 1
if([SYSTEM_STATUS_TABLE  + CORE*5 + 1] != 1) then // permission denied
    [retvalue] = -2;
    [curPCB + 9] = 0;
    multipush(R0);
    // RELEASE_LOCK
    R1 = 4;
    R2 = KERN_LOCK;
    call ACCESS_CONTROL;
    multipop(R0);
    SP = userSP;
    ireturn;
endif;

alias username R3;
username = [[(userSP-4)/512 *2 +PTBR] *512 + ((userSP-4)%512)];

alias utentry R4;
utentry = USER_TABLE;
while (utentry < USER_TABLE + 16 * 2) do
    if([utentry] == username) then
        break;
    endif;
    utentry = utentry + 2;
endwhile;

// invalid username
if(utentry >= USER_TABLE + 16*2) then
    [retvalue] = -1;
    [curPCB + 9] = 0;
    multipush(R0);
    // RELEASE_LOCK
    R1 = 4;
    R2 = KERN_LOCK;
    call ACCESS_CONTROL;
    multipop(R0);
    SP = userSP;

    ireturn;    
endif;

alias password R5;
password = [[(userSP-3)/512 *2 +PTBR] *512 + ((userSP-3)%512)];

encrypt password;

// invalid password
if(password != [utentry + 1]) then
    [retvalue] = -1;
    [curPCB + 9] = 0;
    multipush(R0);
    // RELEASE_LOCK
    R1 = 4;
    R2 = KERN_LOCK;
    call ACCESS_CONTROL;
    multipop(R0);
    SP = userSP;

    ireturn;
endif;

alias userid R6;
userid = (utentry - USER_TABLE)/2;

// init shell process
[PROCESS_TABLE + 2*16 + 3] = userid;  // userid
[PROCESS_TABLE + 2*16 + 4] = CREATED;

// Login waits for shell to exit
[curPCB + 4] = WAIT_PROCESS;
[curPCB + 5] = 2;   

// current userid
[SYSTEM_STATUS_TABLE ] = userid;

multipush(R0,R1,R2);
// RELEASE_LOCK
R1 = 4;
R2 = KERN_LOCK;
call ACCESS_CONTROL;
call SCHEDULER;
// ACQUIRE_KERN_LOCK
R1 = 1;
call ACCESS_CONTROL;
multipop(R0,R1,R2);

[retvalue] = 0;
[curPCB + 9] = 0;
multipush(R0);
// RELEASE_LOCK
R1 = 4;
R2 = KERN_LOCK;
call ACCESS_CONTROL;
multipop(R0);
SP = userSP;

ireturn;
