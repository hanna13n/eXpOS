// MOD_1
alias functionNum R1;

if(functionNum == GET_PCB_ENTRY) then
    alias i R0;
    i = 1;
    while ( i < 16) do
        if ([PROCESS_TABLE + i*16 + 4] == TERMINATED) then
            //pid
            [PROCESS_TABLE + i*16 + 1] = i;
            //STATE
            [PROCESS_TABLE + i*16 + 4] = ALLOCATED;
            //PTLR
            [PROCESS_TABLE + i*16 + 15] = 10;
            //PTBR
            [PROCESS_TABLE + i*16 + 14] = PAGE_TABLE_BASE + i*20; 
            return;
        endif;
        i=i+1;
    endwhile;
    R0 = -1;
    return;
endif;

if(functionNum == FREE_USER_AREA_PAGE) then

    alias i R3;
    i = [PROCESS_TABLE + R2*16 + 11]*512 + 496;
    alias j R4;
    j = i + 16;
    while(i < j) do
        if ([i] == SEMAPHORE) then
            // release semaphore
            multipush(R1,R2,R3,R4);
            R3 = [i + 1];
            R1 = 7;
            call RESOURCE_MANAGER;
            multipop(R1,R2,R3,R4);
        endif;
        if([i] == FILE) then
            // CLOSE
            multipush(R1,R2,R3,R4);
            R1 = 4;
            R2 = [i + 1];
            call FILE_MANAGER;
            multipop(R1,R2,R3,R4);
        endif;
        [i] = -1;
        i = i + 2;
    endwhile;

    //RELEASE_PAGE
    multipush(R1,R2);
    R1 = 2;
    R2 = [PROCESS_TABLE + R2*16 + 11]; //UAPage
    call MEMORY_MANAGER;
    multipop(R1,R2);
    return;
endif;

if(functionNum == EXIT_PROCESS) then
    
    alias pid R2;
    // free_page_table
    multipush(R1,R2);
    R1 = 4;
    call PROCESS_MANAGER;
    
    // free UAPage
    R1 = 2;
    call PROCESS_MANAGER;
    
    multipop(R1,R2);
    
    [PROCESS_TABLE + pid*16 + 4] = TERMINATED;

    // if not from exec
    if([PROCESS_TABLE + pid*16 + 9] != 9 ) then
        alias i R3;
        i = PROCESS_TABLE + 16 + 4;
        while ( i < PROCESS_TABLE + 16*15 + 5) do
            if([i] == WAIT_PROCESS && [i+1] == pid ) then
                [i] = READY;
            endif;
            if ( [i-2] == pid) then // invalidate parent
                [i-2] = -1;
            endif;
            i=i+16;
        endwhile;
    endif;
   
    return;
endif;

if(functionNum == FREE_PAGE_TABLE) then 

    alias ptbr R4;
    ptbr= PAGE_TABLE_BASE + R2*20;
    //Library
    [ptbr + 0] = -1;
    [ptbr + 1] = "0000";
    [ptbr + 2] = -1;
    [ptbr + 3] = "0000";
    alias i R3;
    i = ptbr + 4;
  
    while(i < (ptbr + 20)) do
        if([i] != -1) then
            //RELEASE_PAGE
            multipush(R1,R2,R3,R4);
            R1 = 2;
            R2 = [i];
            call MEMORY_MANAGER;
            multipop(R1,R2,R3,R4);
            [i] = -1;
            [i+1] = "0000";
        endif;
        i=i+2;
    endwhile;
    
    // Release stack,heap blocks 
    // Invalidate disk_map_table entries
    alias disk_map R4;
    disk_map = DISK_MAP_TABLE + R2*10;
    i=2;
    while( i<10 ) do
        if( [disk_map + i] != -1 && ( i==2 || i==3 || i==8 || i==9 )) then
            // RELEASE_BLOCK
            multipush(R1,R2,R3,R4);
            R1 = 4;
            R3 = R2;
            R2 = [disk_map + i];
            call MEMORY_MANAGER;
            multipop(R1,R2,R3,R4);
        endif;
        [disk_map + i]=-1;
        i=i+1;
    endwhile;
    
    return;
endif;

if(functionNum == KILL_ALL) then

    alias curPID R2;
    // lock all files
    alias i R3;
    i = 0;
    while(i < 60) do
        if([INODE_TABLE + i*16 + 1] != -1) then
            // Acquire_INODE
            multipush(R1,R2,R3);
            R1 = 4;
            R3 = i;
            call RESOURCE_MANAGER;
            multipop(R1,R2,R3);
        endif;
        i = i + 1;
    endwhile;
   
    // kill all processes
    i = 2;
    while(i < 15) do
        if(i != curPID && [PROCESS_TABLE + i*16 + 4] != TERMINATED && i != 14) then
            // EXIT_PROCESS
            multipush(R1,R2,R3);
            R1 = 3;
            R2 = i;
            call PROCESS_MANAGER;
            multipop(R1,R2,R3);
        endif;
        i = i + 1;
    endwhile;
    
    // Unlock all files
    i = 0;
    while(i < 60) do
        if([INODE_TABLE + i*16 + 1] != -1) then
            // RELEASE_INODE
            multipush(R1,R2,R3);
            R1 = 5;
            R3 = i;
            call RESOURCE_MANAGER;
            multipop(R1,R2,R3);
        endif;
        i = i + 1;
    endwhile;
    return;
endif;