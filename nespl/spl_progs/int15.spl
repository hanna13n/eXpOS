alias userSP R0;
userSP = SP;

// // count switch to kernel mode
// [75*512 + 3] = [75*512 + 3] + 1;

alias curPCB R1;
curPCB = PROCESS_TABLE + [SYSTEM_STATUS_TABLE  + CORE*5 + 1]*16;

[curPCB + 13] = SP;
SP = [curPCB +11] *512 -1;


[curPCB + 9] = 21;

multipush(R0,R1);
// ACQUIRE_KERN_LOCK
R1 = 1;
call ACCESS_CONTROL;
// ACQUIRE_SCHED_LOCK
R1 = 2;
call ACCESS_CONTROL;
multipop(R0,R1);

// only shell of root user can invoke this function
if([SYSTEM_STATUS_TABLE  + CORE*5 + 1] != 2 || [curPCB + 3] != 1) then

    [[(userSP-1)/512 *2 +PTBR] *512 + ((userSP-1)%512)] = -1;
    [curPCB + 9] = 0;

    multipush(R0);
    // RELEASE_LOCK
    R1 = 4;
    R2 = KERN_LOCK;
    call ACCESS_CONTROL;
    // RELEASE_SCHED_LOCK
    R1 = 4;
    R2 = SCHED_LOCK;
    call ACCESS_CONTROL;
    multipop(R0);
    SP = userSP;
    ireturn;
endif;

reset;
// RELEASE_SCHED_LOCK
R1 = 4;
R2 = SCHED_LOCK;
call ACCESS_CONTROL;
// RELEASE_LOCK
R1 = 4;
R2 = KERN_LOCK;
call ACCESS_CONTROL;

// KILL_ALL
R1 = 5;
R2 = [SYSTEM_STATUS_TABLE  + CORE*5 + 1];
call PROCESS_MANAGER;


// Commit dirty buffer pages
alias i R1;
i = BUFFER_TABLE  + 1;
while(i < BUFFER_TABLE + 3*4 + 2) do
    if([i] == 1 ) then
        // DISK_STORE
        multipush(R1);
        R4 = [i-1];
        R3 = 71 + (i - BUFFER_TABLE - 1) / 4 ;
        R2 = [SYSTEM_STATUS_TABLE  + CORE*5 + 1];
        R1 = 1;
        call DEVICE_MANAGER;
        multipop(R1);
    endif;
    i = i + 4;
endwhile;




// DISK STORE 

R1 = 1;
R2 = [SYSTEM_STATUS_TABLE  + CORE*5 + 1];
R3 = 59;    // inode and user
R4 = 3;
call DEVICE_MANAGER;

R3 = 60;    // inode and user
R4 = 4;
call DEVICE_MANAGER;

R3 = 61;    // DISK Free list
R4 = 2;
call DEVICE_MANAGER;

R3 = 62;    // root file
R4 = 5;
call DEVICE_MANAGER;


// print "Max mem usage";
// print (128-[75*512]);
// print "Disk accesses";
// print [75*512 + 1];
// print "Contextswitches";
// print [75*512 + 2];
// print "Kernel switches";
// print [75*512 + 3];

halt;